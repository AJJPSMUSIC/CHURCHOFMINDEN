/* Designed by Andrew J.Shepherd | plutoneon.com */
/* Base style */
body {
  font-family: 'Courier New', monospace;
  overflow-x: hidden;
  font-size: 2vw;
  padding: 4vh;
  background-color: #a3902a;
  color: #ab6a0f; 
}

.btn {
  cursor: pointer; 
}

h1, h2, h3, h4, h5, h6 {
		color: #a3902a;
		font-family: "Raleway", Helvetica, sans-serif;
		font-weight: 600;
		letter-spacing: 0.175em;
		line-height: 1.75;
		margin: 0 0 1.5rem 0;
		text-transform: uppercase;
	}

		h1 a, h2 a, h3 a, h4 a, h5 a, h6 a {
			color: inherit;
			text-decoration: none;
		}

	h1 {
		font-size: 5rem;
		font-weight: 700;
		padding: 22px;
		letter-spacing: -0.05em;
		line-height: 1.1;
		margin: 0 0 1.5rem 0;
		text-transform: none;
		text-align: center;
	}

	h2 {
		font-size: 1.25rem;
		font-weight: 800;
		margin: 0 0 2rem 0;
	}

	h3 {
		font-size: 0.875rem;
	}

	h4 {
		font-size: 0.875rem;
	}

	h5 {
		font-size: 0.75rem;
	}

	h6 {
		font-size: 0.625rem;
	}

@media screen and (max-width: 736px) {

		h1 {
			font-size: 4.5rem;
			line-height: 1.1;
		}

		h2 {
			font-size: 1.25rem;
			line-height: 1.7;
		}

		h3 {
			font-size: 0.9rem;
		}

		h4 {
			font-size: 0.75rem;
		}

		h5 {
			font-size: 0.675rem;
		}

	}

	@media screen and (max-width: 360px) {

		h1 {
			font-size: 3.75rem;
		}

		h2 {
			font-size: 1.125rem;
		}

		h3 {
			font-size: 0.8rem;
		}

		h4 {
			font-size: 0.675rem;
		}

		h5 {
			font-size: 0.675rem;
		}

	}

	sub {
		font-size: 0.8rem;
		position: relative;
		top: 0.5rem;
	}

	sup {
		font-size: 0.8rem;
		position: relative;
		top: -0.5rem;
	}

	blockquote {
		border-left: solid 0.5rem rgba(144, 144, 144, 0.25);
		font-style: italic;
		margin: 0 0 2rem 0;
		padding: 1rem 0 1rem 2rem;
	}

	code {
		background: rgba(144, 144, 144, 0.1);
		border-radius: 0.325rem;
		font-family: "Courier New", monospace;
		font-size: 0.9rem;
		margin: 0 0.25rem;
		padding: 0.25rem 0.65rem;
	}

	pre {
		-webkit-overflow-scrolling: touch;
		font-family: "Courier New", monospace;
		font-size: 0.9rem;
		margin: 0 0 2rem 0;
		width: 100%;
	}

		pre code {
			display: block;
			line-height: 1.75;
			padding: 1rem 1.5rem;
			overflow-x: auto;
		}

	hr {
		border: 0;
		border-bottom: solid 2px rgba(144, 144, 144, 0.25);
		margin: 3rem 0;
	}

		hr.major {
			margin: 5rem 0;
		}

		@media screen and (max-width: 736px) {

			hr.major {
				margin: 3rem 0;
			}

		}

		ul {
		  margin: 0px;
		  padding: 0px;
		  list-style: none; 
		  color: #ab6a0f; 
		}

		a, a:hover {
		  font-family: 'Brush Script MT', cursive;
		  text-decoration: none;
		  color: #e86181; 
		}

		p {
		  margin-bottom: 20px;
		  line-height: 1.8;
		  color: #ab6a0f; 
		  text-indent: 50px;
		  text-align: justify;
		  letter-spacing: 3px;
		  margin: 0 0 2rem 0;
		  padding: 88px;
		}

		/* End Base style */

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

.container {
  width: 100%;
  min-height: 100vh;
  background: #1d0035;
  overflow: hidden;
}

.main {
  position: absolute;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  transform-style: preserve-3d;
  transform: perspective(700px);
}

.box {
  position: absolute;
  transform-style: preserve-3d;
  top: 150px;
}

.box .octahedron {
  position: relative;
  width: 200px;
  height: 200px;
  transform-style: preserve-3d;
  animation: animateOctahedron 20s linear infinite;
}

.box .octahedron .face {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  transform-style: preserve-3d;
}

.box .octahedron .face span {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(#fb6200, #fb6200, #c3300f);
  transform: rotateY(calc(45deg * var(--i))) translateZ(100px);
}

@keyframes animateOctahedron {
  0% {
    transform: rotateY(0deg);
  }
  100% {
    transform: rotateY(360deg);
  }
}

.box .octahedron::before {
  content: '';
  position: absolute;
  width: 400px;
  height: 400px;
  background: #fb6200;
  transform: translateZ(-300px);
  filter: blur(50px);
  box-shadow: 0 0 120px rgba(251, 98, 0, 0.2),
    0 0 200px rgba(251, 98, 0, 0.4),
    0 0 300px rgba(251, 98, 0, 0.6),
    0 0 400px rgba(251, 98, 0, 0.8),
    0 0 500px rgba(251, 98, 0, 1);
}

.mandelbrot {
  animation: mandelbrot-animation 5s ease-in-out infinite;
  background-color: orange;
}

@keyframes mandelbrot-animation {
  0% {
    transform: scale(1);
  }
  100% {
    transform: scale(1.1);
  }
}

.fractal {
  fill: purple;
}

@import 'compass/css3';

$t: 5s;

@function getPolyPoints(
		$n: 3 /* number of poly vertices */, 
		$oa: -90deg /* angular offset of 1st poly vertex */) {
	
	$ba: 360deg/$n; // base angle corrensponding to 1 poly edge
	$pl: (); // list of points, initially empty
	
	@for $i from 0 to $n {
		$ca: $i*$ba + $oa; // angle current point is at wrt x axis
		$x: 50%*(1 + cos($ca)); // x coord of current point
		$y: 50%*(1 + sin($ca)); // y coord of current point
		$pl: $pl, $x $y // add current point coords to points list
	}
	
	@return $pl
}

@function use($map, $key, $default) {
	@return if(map-has-key($map, $key), map-get($map, $key), $default)
}

@mixin s8hedron($l, $bg, $ani: false, $shadow: false) {
	$n3gon: 3; // number of vertices of triangular octahedron faces
	$ba3gon: 360deg/$n3gon; // base angle corresponding to equilateral triangle edge
	$rc3gon: .5*$l/sin(.5*$ba3gon); // circumradius of equilateral triangle of edge $l
	
	$n8hedron: 8;
	$m: .5*$n8hedron;
	$rc8hedron: $l/sqrt(2);
	$rm8hedron: .5*$l;
	$rax8hedron: atan($rm8hedron/$rc8hedron)*180deg/pi(); // x rotation angle for octahedron faces
	$ri8hedron: $rc8hedron*sin($rax8hedron); // inradius of octahedron
	
	--i: 0;
	--j: 0;
	position: absolute;
	top: 50%; left: 50%;
	transform-style: preserve-3d;
	animation: rot $t linear calc((var(--p) - 1)*#{$t}) infinite;
	animation-play-state: if($ani, null, paused);
	
	@if $shadow {
		&:before {
			position: absolute;
			margin: -1px;
			padding: 1px;
			transform: 
				translatey(calc(#{$rc8hedron} + #{use($shadow, dy, 0px)})) 
				rotatex(90deg);
			box-shadow: 0 0 .25*$rm8hedron $rm8hedron currentcolor;
			background: currentcolor;
			color: use($shadow, c, silver);
			content: ''
		}
	}
	
	&__face {
		position: absolute;
		margin: -$rc3gon;
		padding: $rc3gon;
		transform: rotatey(calc(var(--i)*-1turn/#{$m})) 
			rotate(calc((1 - var(--j))*.5turn)) 
			rotatex($rax8hedron) 
			translatez($ri8hedron);
		background: $bg;
		filter: brightness(calc(1 + var(--j)*.1));
		--shape: polygon(getPolyPoints());
		-webkit-clip-path: var(--shape);
						clip-path: var(--shape);
		animation: shade .5*$t ease-in-out calc((var(--p) - var(--i)/#{$m})*#{$t}) infinite alternate;
		animation-play-state: inherit;
		
		&:nth-child(n + #{$m + 1}) { --j: 1 }
		
		@for $i from 1 to $m { &:nth-child(#{$m}n + #{$i + 1}) { --i: #{$i} } }
	}
	
	@keyframes rot { 0% { transform: rotatey(1turn) } }
	
	@keyframes shade { to { filter: brightness(calc(.5 + var(--j)*.1)) } }
}

body {
	--p: 0;
	overflow: hidden;
	height: 100vh;
	perspective: 25em;
	perspective-origin: 50% calc(50% - 1em);
	background:gainsboro
}

.s8hedron { @include s8hedron(25vmin, #7e2b83, true, (dy: 2em)) }
